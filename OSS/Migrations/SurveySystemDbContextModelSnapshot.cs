// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using OSS.Data;
using System;

namespace OSS.Migrations
{
    [DbContext(typeof(SurveySystemDbContext))]
    partial class SurveySystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Answer", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("SurveyId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("LecturerId");

                    b.Property<int>("SubjectId");

                    b.Property<int>("QuestionAnswerId");

                    b.HasKey("StudentId", "SurveyId", "QuestionId", "LecturerId", "SubjectId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("QuestionAnswerId")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("ShortName");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Lecturer", b =>
                {
                    b.Property<int>("LecturerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<byte[]>("Photo");

                    b.HasKey("LecturerId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.LecturerSubject", b =>
                {
                    b.Property<int>("LecturerId");

                    b.Property<int>("SubjectId");

                    b.HasKey("LecturerId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("LecturerSubject");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SurveyId");

                    b.Property<string>("Text");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.QuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Score");

                    b.HasKey("QuestionAnswerId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FacultyId");

                    b.Property<string>("FullName");

                    b.Property<string>("SpecialtyCode");

                    b.HasKey("SpecialtyId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gender");

                    b.Property<int>("SpecialtyId");

                    b.Property<string>("StudentIP");

                    b.HasKey("StudentId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("ShortName");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("FinishTime");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("StartTime");

                    b.HasKey("SurveyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Answer", b =>
                {
                    b.HasOne("OSS.Models.SurveySystemModels.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OSS.Models.SurveySystemModels.QuestionAnswer", "QuestionAnswer")
                        .WithOne("Answer")
                        .HasForeignKey("OSS.Models.SurveySystemModels.Answer", "QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OSS.Models.SurveySystemModels.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OSS.Models.SurveySystemModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OSS.Models.SurveySystemModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OSS.Models.SurveySystemModels.Survey", "Survey")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.LecturerSubject", b =>
                {
                    b.HasOne("OSS.Models.SurveySystemModels.Lecturer", "Lecturer")
                        .WithMany("LecturerSubjects")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OSS.Models.SurveySystemModels.Subject", "Subject")
                        .WithMany("SubjectLecturers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Question", b =>
                {
                    b.HasOne("OSS.Models.SurveySystemModels.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Specialty", b =>
                {
                    b.HasOne("OSS.Models.SurveySystemModels.Faculty", "Faculty")
                        .WithMany("Specialties")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OSS.Models.SurveySystemModels.Student", b =>
                {
                    b.HasOne("OSS.Models.SurveySystemModels.Specialty", "Specialty")
                        .WithMany("Students")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
